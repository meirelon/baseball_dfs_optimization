mainPanel(
tabsetPanel(
id = 'Visualizations',
tabPanel('Comparison Among Players', dygraphOutput("Compare1"))))
)
)
)
)
shinyApp(ui, server)
unique(batters$Tm)
ui <- fluidPage(
theme = shinytheme("united"),
tags$h2(style = "font-family:Impact",
"Daily Fantasy Baseball Player Lineup Optimization"),
tags$p(style = "font-family:Calibri",
"Group 1: Disha An, Luis Flores,
Mike Nestel, Nick Benvenuto"),
tags$hr(), # Draw a line
#CREATE A SIDEBAR PANEL TO UPLOAD DFS LINK
sidebarPanel(
selectInput("Dominant Platforms", "Please choose a platform:",
c('DraftKings', 'FanDuel') ),
textOutput("PlatformChosen"),
tags$hr(),
#Link to be provided by user from Draft Kings
textInput("dk_file", "link to DFS csv file")
),
mainPanel(
h3("All of the baseball data is in your hands!"),
p("Powered by FE550 Team 1"),
tabsetPanel(
tabPanel("Optimal Lineup Tuning", tags$hr(), tags$p(style = "font-family:Calibri", "Today's optimized lineup without the opposition team you don't want: "),
textInput("oppo_not", "Opposition team names you don't want to include: ", "BOS"),
selectInput("risk_tol", "Choose your risk tolerance", c("Low Risk", "Medium Risk", "High Risk")),
checkboxInput("use_pitch_bat", "Use Pitcher vs. Batter in Projections?", value = FALSE),
tableOutput("Optimized2"), tags$hr()),
tabPanel("Player Comparison Tool", textInput("players_name", "Players you want to compare: ", "Bryce Harper, Mike Trout"),
textOutput("right_name"),
selectInput("baseball_stat", "CHOOSE A BASEBALL STATISTIC: ", c("PA", "AB", "R", "H", "2B", "3B", "HR", "RBI", "BB", "IBB", "SO", "HBP", "SH", "SF", "ROE", "GDP", "SB", "CS", "BOP", "DFS.DK.", "DFS.FD.", "BA", "OBP", "SLG", "OPS")),
selectInput("compare_type", "Type of Comparison", c("season", "weekly", "daily")),
mainPanel(
tabsetPanel(
id = 'Visualizations',
tabPanel('Comparison Among Players', dygraphOutput("Compare1"))))
)
)
)
)
shinyApp(ui, server)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='stevensfe550',
token='A5748AA7B184906764E73D033819DE27',
secret='<SECRET>')
rsconnect::setAccountInfo(name='stevensfe550',
token='A5748AA7B184906764E73D033819DE27',
secret='B12PhU0BoOGcFtUSi6dsCkOcBcIuqHRP9J1VOzDf')
rsconnect::deployApp('C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/shiny_app_mn2.Rmd')
rsconnect::deployApp('C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/shiny_app_mn2.Rmd')
ui <- fluidPage(
theme = shinytheme("united"),
tags$h2(style = "font-family:Impact",
"Daily Fantasy Baseball Player Lineup Optimization"),
tags$p(style = "font-family:Calibri",
"Group 1: Disha An, Luis Flores,
Mike Nestel, Nick Benvenuto"),
tags$hr(), # Draw a line
#CREATE A SIDEBAR PANEL TO UPLOAD DFS LINK
sidebarPanel(
selectInput("Dominant Platforms", "Please choose a platform:",
c('DraftKings', 'FanDuel') ),
textOutput("PlatformChosen"),
tags$hr(),
#Link to be provided by user from Draft Kings
textInput("dk_file", "link to DFS csv file")
),
mainPanel(
h3("All of the baseball data is in your hands!"),
p("Powered by FE550 Team 1"),
tabsetPanel(
tabPanel("Optimal Lineup Tuning", tags$hr(), tags$p(style = "font-family:Calibri", "Today's optimized lineup without the opposition team you don't want: "),
textInput("oppo_not", "Opposition team names you don't want to include: ", "BOS"),
selectInput("risk_tol", "Choose your risk tolerance", c("Low Risk", "Medium Risk", "High Risk")),
checkboxInput("use_pitch_bat", "Use Pitcher vs. Batter in Projections?", value = FALSE),
tableOutput("Optimized2"), tags$hr()),
tabPanel("Player Comparison Tool", textInput("players_name", "Players you want to compare: ", "Bryce Harper, Mike Trout"),
textOutput("right_name"),
selectInput("baseball_stat", "CHOOSE A BASEBALL STATISTIC: ", c("PA", "AB", "R", "H", "2B", "3B", "HR", "RBI", "BB", "IBB", "SO", "HBP", "SH", "SF", "ROE", "GDP", "SB", "CS", "BOP", "DFS.DK.", "DFS.FD.", "BA", "OBP", "SLG", "OPS")),
selectInput("compare_type", "Type of Comparison", c("season", "weekly", "daily")),
mainPanel(
tabsetPanel(
id = 'Visualizations',
tabPanel('Comparison Among Players', dygraphOutput("Compare1"))))
)
)
)
)
library(plyr);library(dplyr);library(stringr);library(rvest);library(lubridate);library(readr);library(tidyr);library(xts);library(dygraphs);library(lazyeval);library(RColorBrewer);library(shiny);library(shinythemes)
ui <- fluidPage(
theme = shinytheme("united"),
tags$h2(style = "font-family:Impact",
"Daily Fantasy Baseball Player Lineup Optimization"),
tags$p(style = "font-family:Calibri",
"Group 1: Disha An, Luis Flores,
Mike Nestel, Nick Benvenuto"),
tags$hr(), # Draw a line
#CREATE A SIDEBAR PANEL TO UPLOAD DFS LINK
sidebarPanel(
selectInput("Dominant Platforms", "Please choose a platform:",
c('DraftKings', 'FanDuel') ),
textOutput("PlatformChosen"),
tags$hr(),
#Link to be provided by user from Draft Kings
textInput("dk_file", "link to DFS csv file")
),
mainPanel(
h3("All of the baseball data is in your hands!"),
p("Powered by FE550 Team 1"),
tabsetPanel(
tabPanel("Optimal Lineup Tuning", tags$hr(), tags$p(style = "font-family:Calibri", "Today's optimized lineup without the opposition team you don't want: "),
textInput("oppo_not", "Opposition team names you don't want to include: ", "BOS"),
selectInput("risk_tol", "Choose your risk tolerance", c("Low Risk", "Medium Risk", "High Risk")),
checkboxInput("use_pitch_bat", "Use Pitcher vs. Batter in Projections?", value = FALSE),
tableOutput("Optimized2"), tags$hr()),
tabPanel("Player Comparison Tool", textInput("players_name", "Players you want to compare: ", "Bryce Harper, Mike Trout"),
textOutput("right_name"),
selectInput("baseball_stat", "CHOOSE A BASEBALL STATISTIC: ", c("PA", "AB", "R", "H", "2B", "3B", "HR", "RBI", "BB", "IBB", "SO", "HBP", "SH", "SF", "ROE", "GDP", "SB", "CS", "BOP", "DFS.DK.", "DFS.FD.", "BA", "OBP", "SLG", "OPS")),
selectInput("compare_type", "Type of Comparison", c("season", "weekly", "daily")),
mainPanel(
tabsetPanel(
id = 'Visualizations',
tabPanel('Comparison Among Players', dygraphOutput("Compare1"))))
)
)
)
)
server <- function(input, output){
batters <- read.csv("C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/batter_gamelogs_2017_colheads.csv", stringsAsFactors = F)
pitchers <- read.csv("C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/pitcher_gamelogs_2017_colheads.csv", stringsAsFactors = F)
player_info <- read.csv("C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/player_info_clean.csv", stringsAsFactors = F)
####
#GET ALL FUNCTIONS
####
#EXTRACT DRAFT KINGS DAILY INFO INTO A DATAFRAME
get_dk_foo <- function(link){
dk_daily_df <- read.csv(link, header=T, stringsAsFactors = F) %>%
separate(GameInfo, into = c("everythingelse", "game_time"), sep = " ", remove = T) %>%
separate(everythingelse, into = c("away", "home"), sep = "@", remove = T) %>%
mutate(away = toupper(away)) %>%
mutate(home = toupper(home)) %>%
mutate(teamAbbrev = toupper(teamAbbrev)) %>%
mutate(Position = str_replace(str_extract(Position, "^.{1,2}"), pattern = "/", "")) %>%
mutate(Opp = ifelse(teamAbbrev == home, away, home))
}
#OPTIMIZE DRAFT KINGS LINEUP
get_dk_lineup <- function(data, salary_constraint = 50000, n_lineups = 10){
require(lpSolve)
require(stringr)
require(dummies)
require(plyr)
require(dplyr)
f_obj <- data$proj
Position_matrix <- dummy(data$Position)
colnames(Position_matrix) = c("1B", "2B", "3B", "C", "OF", "P", "SS")
f_constraints <- t(cbind(Salary = data$Salary, Position_matrix))
colnames(f_constraints) <- toupper(data$Name)
f_dir <- rep(0, nrow(f_constraints)); f_dir[1] <- '<='
f_rhs <- rep(0, nrow(f_constraints)); f_rhs[1] <- salary_constraint
f_dir[2:nrow(f_constraints)] <- c("=", "=", "=", "=", "=", "=", "=", "=")
f_rhs[2:nrow(f_constraints)] <- c(1,1,1,1,3,2,1,10)
opt <- lp("max", objective.in = f_obj, const.mat = f_constraints, const.dir = f_dir, const.rhs = f_rhs, all.bin = T,num.bin.solns = 1)
picks <- data[which(opt$solution==1),] %>%
arrange(desc(Salary))
return(picks)
}
get_starters <- function(total_games){
dailylineup_link <- "http://www.rotowire.com/baseball/daily_lineups.htm"
dailylineup_page <- read_html(dailylineup_link)
starter_list <- c()
for(i in 1:total_games){
for(j in 1:10){
dailylineup_df <- dailylineup_page %>%
html_nodes(css = sprintf("body > div:nth-child(3) > div:nth-child(%d) > div:nth-child(%d) > div.span15.dlineups-mainbox", j,i)) %>%
html_text()
player_regex <- paste0("(", paste0(player_info$player_name, collapse = "|"), ")")
starter_list <- append(starter_list, unlist(str_extract_all(string = dailylineup_df, pattern = player_regex)))
}
}
return(unique(starter_list))
}
#Tailor batter projections based on the pitcher they are expected to face that day.
get_player_projection <- function(playersname, tmp2){
cat(playersname); cat(' ')
get_player_id <- function(playername){
return(unlist(filter(player_info, player_name == playername) %>% select(player_id)))
}
id = get_player_id(playersname)
pitcher_vs_batter_link <- sprintf("http://www.baseball-reference.com/play-index/batter_vs_pitcher.cgi?batter=%s", id)
pitcher_vs_batter_page <- try(read_html(pitcher_vs_batter_link))
pitcher_vs_batter_df <- pitcher_vs_batter_page %>%
html_nodes(xpath = '//*[@id="ajax_result_table"]') %>%
html_table() %>%
as.data.frame %>%
filter(Name != "Name")
for(i in 2:ncol(pitcher_vs_batter_df)){
pitcher_vs_batter_df[,i] <- as.numeric(pitcher_vs_batter_df[,i])
}
batter_pitcher_stats <- pitcher_vs_batter_df %>%
filter(PA >= 10) %>%
mutate(h_avg = H/sum(H)) %>%
mutate(hr_avg = HR/sum(HR)) %>%
mutate(rbi_avg = RBI/sum(RBI)) %>%
mutate(hbp_avg = HBP/sum(HBP)) %>%
select(h_avg, hr_avg, rbi_avg, hbp_avg)
if(nrow(batter_pitcher_stats) == 0){
batter_today <- tmp2 %>%
inner_join(filter(player_info, player_id == id) %>% select(player_name), by = c("Name" = "player_name")) %>%
mutate(proj = AvgPointsPerGame)
return(batter_today$proj)
}
batter_pitcher_stats[batter_pitcher_stats > .1]  <- .1
batter_pitcher_stats$Name <- unlist(filter(pitcher_vs_batter_df, PA >= 10) %>% select(Name))
batter_today <- tmp2 %>%
inner_join(filter(player_info, player_id == id) %>% select(player_name), by = c("Name" = "player_name"))
pitcher_today <- batter_pitcher_stats %>%
inner_join(tmp2, by = "Name") %>%
filter(Opp == batter_today$teamAbbrev) %>%
select(h_avg, hr_avg, rbi_avg, hbp_avg)
batter_today$proj <- ifelse(nrow(pitcher_today) == 1, batter_today$AvgPointsPerGame + sum(batter_today$AvgPointsPerGame*pitcher_today), batter_today$AvgPointsPerGame)
return(batter_today$proj)
}
#Get each batter's normalized variance in fantasy points scored with respect to their position
league_pos_dfs_df <- batters %>%
select(Pos, game_date, `DFS.DK.`, `DFS.FD.`) %>%
mutate(Pos = str_extract(Pos, pattern = ".{1,2}")) %>%
mutate(Pos = str_replace_all(Pos, "(LF)|(CF)|(RF)", "OF")) %>%
filter(Pos %in% c("C", "1B", "2B", "3B", "SS", "OF")) %>%
group_by(Pos, game_date) %>%
summarise(league_dk_sum = sum(`DFS.DK.`, na.rm=T), league_dk_sdd = sd(`DFS.DK.`, na.rm=T), league_fd_sum = sum(`DFS.FD.`, na.rm=T), league_fd_sdd = sd(`DFS.FD.`, na.rm=T), league_dk_sdd = sd(`DFS.FD.`, na.rm=T), GP = n()) %>%
group_by(Pos) %>%
mutate(league_dk_avg = cumsum(league_dk_sum) / cumsum(GP)) %>%
mutate(league_dk_sd = cummean(league_dk_sdd)) %>%
mutate(league_fd_avg = cumsum(league_fd_sum) / cumsum(GP)) %>%
mutate(league_fd_sd = cummean(league_fd_sdd)) %>%
ungroup() %>%
select(Pos, game_date, league_dk_avg, league_dk_sd, league_dk_sd, league_fd_avg, league_fd_sd)
batter_risk_df <- batters %>%
select(player_id, game_date, Pos,`DFS.DK.`, `DFS.FD.`) %>%
mutate(Pos = str_extract(Pos, pattern = ".{1,2}")) %>%
mutate(Pos = str_replace_all(Pos, "(LF)|(CF)|(RF)", "OF")) %>%
filter(Pos %in% c("C", "1B", "2B", "3B", "SS", "OF")) %>%
group_by(player_id, Pos) %>%
mutate(player_dk_avg = cummean(`DFS.DK.`)) %>%
mutate(player_fd_avg = cummean(`DFS.FD.`)) %>%
left_join(league_pos_dfs_df, by = c("Pos" = "Pos", "game_date" = "game_date")) %>%
mutate(player_dk_scale = (player_dk_avg - league_dk_avg) / (league_dk_sd)) %>%
mutate(player_dk_scale_pnorm = pnorm(player_dk_scale)) %>%
mutate(player_fd_scale = (player_fd_avg - league_fd_avg) / (league_fd_sd)) %>%
mutate(player_fd_scale_pnorm = pnorm(player_fd_scale)) %>%
left_join(select(player_info, player_id, player_name), by = "player_id") %>%
group_by(player_id) %>%
filter(game_date == max(game_date))
####
#BEGIN SHINY OUTPUT
####
output$PlatformChosen <- renderText({
paste("You chose", input$'Dominant Platforms')
})
output$Optimized2 <- renderTable({
risk_tolerance_df <- data.frame()
if(input$'risk_tol' == "Low Risk"){
risk_tolerance_df <- filter(batter_risk_df, player_dk_scale_pnorm <= .70 &  player_dk_scale_pnorm >= .35)
}
else if(input$'risk_tol' == "Medium Risk"){
risk_tolerance_df <- filter(batter_risk_df, player_dk_scale_pnorm <= .80 & player_dk_scale_pnorm >= .25)
}
else{
risk_tolerance_df <- batter_risk_df
}
oppo_not <- unlist(strsplit(input$'oppo_not', split = ", "))
oppo_not <- as.list(oppo_not)
tmp <- get_dk_foo(input$'dk_file')
tmp$Position[tmp$Position == "SP" | tmp$Position == "RP"] <- "P"
tmp$proj <- tmp$AvgPointsPerGame
players_starting <- get_starters(14)
tmp2 <- filter(tmp, toupper(Name) %in% toupper(players_starting))
if(input$"use_pitch_bat" == T){
tmp2$proj <- sapply(tmp2$Name, function(q) get_player_projection(playersname = q, tmp2 = tmp2))
}
tmp3 <- tmp2 %>%
filter(!Opp %in% oppo_not) %>%
filter(toupper(Name) %in% unique(toupper(risk_tolerance_df$player_name)))
optimizedtable2 <- get_dk_lineup(tmp3)
if(nrow(optimizedtable2) == 0){
tmp3 <- tmp2 %>%
filter(!Opp %in% oppo_not)
optimizedtable2 <- get_dk_lineup(tmp3)
}
optimizedtable2
})
output$right_name <- renderText({
players_name1 <- unlist(strsplit(input$'players_name', split = ", "))
players_name_match1 <- sapply(players_name1, jaccard_best_match)
#players_name_match1 <- jaccard_best_match(players_name1, b = player_info$player_name)
paste("You may mean ", players_name_match1)
})
output$Compare1 <- renderDygraph({
players_name <- unlist(strsplit(input$'players_name', split = ", "))
baseball_stat <- unlist(strsplit(input$'baseball_stat', split = ", "))
players_name_match <- sapply(players_name, jaccard_best_match)
plot_1 <- player_compare(players_name_match, baseball_stat, compare_type = input$'compare_type')
plot_1
})
}
shinyApp(ui, server)
server <- function(input, output){
batters <- read.csv("batter_gamelogs_2017_colheads.csv", stringsAsFactors = F)
pitchers <- read.csv("pitcher_gamelogs_2017_colheads.csv", stringsAsFactors = F)
player_info <- read.csv("player_info_clean.csv", stringsAsFactors = F)
####
#GET ALL FUNCTIONS
####
#EXTRACT DRAFT KINGS DAILY INFO INTO A DATAFRAME
get_dk_foo <- function(link){
dk_daily_df <- read.csv(link, header=T, stringsAsFactors = F) %>%
separate(GameInfo, into = c("everythingelse", "game_time"), sep = " ", remove = T) %>%
separate(everythingelse, into = c("away", "home"), sep = "@", remove = T) %>%
mutate(away = toupper(away)) %>%
mutate(home = toupper(home)) %>%
mutate(teamAbbrev = toupper(teamAbbrev)) %>%
mutate(Position = str_replace(str_extract(Position, "^.{1,2}"), pattern = "/", "")) %>%
mutate(Opp = ifelse(teamAbbrev == home, away, home))
}
#OPTIMIZE DRAFT KINGS LINEUP
get_dk_lineup <- function(data, salary_constraint = 50000, n_lineups = 10){
require(lpSolve)
require(stringr)
require(dummies)
require(plyr)
require(dplyr)
f_obj <- data$proj
Position_matrix <- dummy(data$Position)
colnames(Position_matrix) = c("1B", "2B", "3B", "C", "OF", "P", "SS")
f_constraints <- t(cbind(Salary = data$Salary, Position_matrix))
colnames(f_constraints) <- toupper(data$Name)
f_dir <- rep(0, nrow(f_constraints)); f_dir[1] <- '<='
f_rhs <- rep(0, nrow(f_constraints)); f_rhs[1] <- salary_constraint
f_dir[2:nrow(f_constraints)] <- c("=", "=", "=", "=", "=", "=", "=", "=")
f_rhs[2:nrow(f_constraints)] <- c(1,1,1,1,3,2,1,10)
opt <- lp("max", objective.in = f_obj, const.mat = f_constraints, const.dir = f_dir, const.rhs = f_rhs, all.bin = T,num.bin.solns = 1)
picks <- data[which(opt$solution==1),] %>%
arrange(desc(Salary))
return(picks)
}
get_starters <- function(total_games){
dailylineup_link <- "http://www.rotowire.com/baseball/daily_lineups.htm"
dailylineup_page <- read_html(dailylineup_link)
starter_list <- c()
for(i in 1:total_games){
for(j in 1:10){
dailylineup_df <- dailylineup_page %>%
html_nodes(css = sprintf("body > div:nth-child(3) > div:nth-child(%d) > div:nth-child(%d) > div.span15.dlineups-mainbox", j,i)) %>%
html_text()
player_regex <- paste0("(", paste0(player_info$player_name, collapse = "|"), ")")
starter_list <- append(starter_list, unlist(str_extract_all(string = dailylineup_df, pattern = player_regex)))
}
}
return(unique(starter_list))
}
#Tailor batter projections based on the pitcher they are expected to face that day.
get_player_projection <- function(playersname, tmp2){
cat(playersname); cat(' ')
get_player_id <- function(playername){
return(unlist(filter(player_info, player_name == playername) %>% select(player_id)))
}
id = get_player_id(playersname)
pitcher_vs_batter_link <- sprintf("http://www.baseball-reference.com/play-index/batter_vs_pitcher.cgi?batter=%s", id)
pitcher_vs_batter_page <- try(read_html(pitcher_vs_batter_link))
pitcher_vs_batter_df <- pitcher_vs_batter_page %>%
html_nodes(xpath = '//*[@id="ajax_result_table"]') %>%
html_table() %>%
as.data.frame %>%
filter(Name != "Name")
for(i in 2:ncol(pitcher_vs_batter_df)){
pitcher_vs_batter_df[,i] <- as.numeric(pitcher_vs_batter_df[,i])
}
batter_pitcher_stats <- pitcher_vs_batter_df %>%
filter(PA >= 10) %>%
mutate(h_avg = H/sum(H)) %>%
mutate(hr_avg = HR/sum(HR)) %>%
mutate(rbi_avg = RBI/sum(RBI)) %>%
mutate(hbp_avg = HBP/sum(HBP)) %>%
select(h_avg, hr_avg, rbi_avg, hbp_avg)
if(nrow(batter_pitcher_stats) == 0){
batter_today <- tmp2 %>%
inner_join(filter(player_info, player_id == id) %>% select(player_name), by = c("Name" = "player_name")) %>%
mutate(proj = AvgPointsPerGame)
return(batter_today$proj)
}
batter_pitcher_stats[batter_pitcher_stats > .1]  <- .1
batter_pitcher_stats$Name <- unlist(filter(pitcher_vs_batter_df, PA >= 10) %>% select(Name))
batter_today <- tmp2 %>%
inner_join(filter(player_info, player_id == id) %>% select(player_name), by = c("Name" = "player_name"))
pitcher_today <- batter_pitcher_stats %>%
inner_join(tmp2, by = "Name") %>%
filter(Opp == batter_today$teamAbbrev) %>%
select(h_avg, hr_avg, rbi_avg, hbp_avg)
batter_today$proj <- ifelse(nrow(pitcher_today) == 1, batter_today$AvgPointsPerGame + sum(batter_today$AvgPointsPerGame*pitcher_today), batter_today$AvgPointsPerGame)
return(batter_today$proj)
}
#Get each batter's normalized variance in fantasy points scored with respect to their position
league_pos_dfs_df <- batters %>%
select(Pos, game_date, `DFS.DK.`, `DFS.FD.`) %>%
mutate(Pos = str_extract(Pos, pattern = ".{1,2}")) %>%
mutate(Pos = str_replace_all(Pos, "(LF)|(CF)|(RF)", "OF")) %>%
filter(Pos %in% c("C", "1B", "2B", "3B", "SS", "OF")) %>%
group_by(Pos, game_date) %>%
summarise(league_dk_sum = sum(`DFS.DK.`, na.rm=T), league_dk_sdd = sd(`DFS.DK.`, na.rm=T), league_fd_sum = sum(`DFS.FD.`, na.rm=T), league_fd_sdd = sd(`DFS.FD.`, na.rm=T), league_dk_sdd = sd(`DFS.FD.`, na.rm=T), GP = n()) %>%
group_by(Pos) %>%
mutate(league_dk_avg = cumsum(league_dk_sum) / cumsum(GP)) %>%
mutate(league_dk_sd = cummean(league_dk_sdd)) %>%
mutate(league_fd_avg = cumsum(league_fd_sum) / cumsum(GP)) %>%
mutate(league_fd_sd = cummean(league_fd_sdd)) %>%
ungroup() %>%
select(Pos, game_date, league_dk_avg, league_dk_sd, league_dk_sd, league_fd_avg, league_fd_sd)
batter_risk_df <- batters %>%
select(player_id, game_date, Pos,`DFS.DK.`, `DFS.FD.`) %>%
mutate(Pos = str_extract(Pos, pattern = ".{1,2}")) %>%
mutate(Pos = str_replace_all(Pos, "(LF)|(CF)|(RF)", "OF")) %>%
filter(Pos %in% c("C", "1B", "2B", "3B", "SS", "OF")) %>%
group_by(player_id, Pos) %>%
mutate(player_dk_avg = cummean(`DFS.DK.`)) %>%
mutate(player_fd_avg = cummean(`DFS.FD.`)) %>%
left_join(league_pos_dfs_df, by = c("Pos" = "Pos", "game_date" = "game_date")) %>%
mutate(player_dk_scale = (player_dk_avg - league_dk_avg) / (league_dk_sd)) %>%
mutate(player_dk_scale_pnorm = pnorm(player_dk_scale)) %>%
mutate(player_fd_scale = (player_fd_avg - league_fd_avg) / (league_fd_sd)) %>%
mutate(player_fd_scale_pnorm = pnorm(player_fd_scale)) %>%
left_join(select(player_info, player_id, player_name), by = "player_id") %>%
group_by(player_id) %>%
filter(game_date == max(game_date))
####
#BEGIN SHINY OUTPUT
####
output$PlatformChosen <- renderText({
paste("You chose", input$'Dominant Platforms')
})
output$Optimized2 <- renderTable({
risk_tolerance_df <- data.frame()
if(input$'risk_tol' == "Low Risk"){
risk_tolerance_df <- filter(batter_risk_df, player_dk_scale_pnorm <= .70 &  player_dk_scale_pnorm >= .35)
}
else if(input$'risk_tol' == "Medium Risk"){
risk_tolerance_df <- filter(batter_risk_df, player_dk_scale_pnorm <= .80 & player_dk_scale_pnorm >= .25)
}
else{
risk_tolerance_df <- batter_risk_df
}
oppo_not <- unlist(strsplit(input$'oppo_not', split = ", "))
oppo_not <- as.list(oppo_not)
tmp <- get_dk_foo(input$'dk_file')
tmp$Position[tmp$Position == "SP" | tmp$Position == "RP"] <- "P"
tmp$proj <- tmp$AvgPointsPerGame
players_starting <- get_starters(14)
tmp2 <- filter(tmp, toupper(Name) %in% toupper(players_starting))
if(input$"use_pitch_bat" == T){
tmp2$proj <- sapply(tmp2$Name, function(q) get_player_projection(playersname = q, tmp2 = tmp2))
}
tmp3 <- tmp2 %>%
filter(!Opp %in% oppo_not) %>%
filter(toupper(Name) %in% unique(toupper(risk_tolerance_df$player_name)))
optimizedtable2 <- get_dk_lineup(tmp3)
if(nrow(optimizedtable2) == 0){
tmp3 <- tmp2 %>%
filter(!Opp %in% oppo_not)
optimizedtable2 <- get_dk_lineup(tmp3)
}
optimizedtable2
})
output$right_name <- renderText({
players_name1 <- unlist(strsplit(input$'players_name', split = ", "))
players_name_match1 <- sapply(players_name1, jaccard_best_match)
#players_name_match1 <- jaccard_best_match(players_name1, b = player_info$player_name)
paste("You may mean ", players_name_match1)
})
output$Compare1 <- renderDygraph({
players_name <- unlist(strsplit(input$'players_name', split = ", "))
baseball_stat <- unlist(strsplit(input$'baseball_stat', split = ", "))
players_name_match <- sapply(players_name, jaccard_best_match)
plot_1 <- player_compare(players_name_match, baseball_stat, compare_type = input$'compare_type')
plot_1
})
}
shinyApp(ui, server)
source('C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/Shiny_puplished/server.R')
source('C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/Shiny_puplished/ui.R')
source('C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/Shiny_puplished/server.R')
source('C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/Shiny_puplished/server.R')
shinyApp(ui, server)
setwd("C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/")
shinyApp(ui, server)
getwd()
setwd("C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/Shiny_published/")
setwd("C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/Shiny_puplished")
setwd("C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/Shiny_puplished")
setwd("C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/Shiny_puplished")
getwd()
shinyApp(ui, server)
source('C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/Shiny_puplished/server.R')
source('C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/Shiny_puplished/ui.R')
shinyApp(ui, server)
source('C:/Users/neste/Google Drive/FE550_Team1/Code/Shiny_app/Shiny/Shiny_puplished/ui.R')
shinyApp(ui, server)
